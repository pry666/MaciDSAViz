Name:Rotation and scaling of 3D matrices

Code:
import numpy as np

def rotate_and_scale_3d(matrix, angle_x, angle_y, angle_z, scale_x, scale_y, scale_z):

    angle_x = np.radians(angle_x)
    angle_y = np.radians(angle_y)
    angle_z = np.radians(angle_z)

    rotation_x = np.array([
        [1, 0, 0],
        [0, np.cos(angle_x), -np.sin(angle_x)],
        [0, np.sin(angle_x), np.cos(angle_x)]
    ])

    rotation_y = np.array([
        [np.cos(angle_y), 0, np.sin(angle_y)],
        [0, 1, 0],
        [-np.sin(angle_y), 0, np.cos(angle_y)]
    ])

    rotation_z = np.array([
        [np.cos(angle_z), -np.sin(angle_z), 0],
        [np.sin(angle_z), np.cos(angle_z), 0],
        [0, 0, 1]
    ])

    rotation_matrix = rotation_z @ rotation_y @ rotation_x

    scaling_matrix = np.array([
        [scale_x, 0, 0],
        [0, scale_y, 0],
        [0, 0, scale_z]
    ])

    transformation_matrix = rotation_matrix @ scaling_matrix

    transformed_matrix = np.dot(matrix, transformation_matrix.T)

    return transformed_matrix

if __name__ == "__main__":
    original_matrix = np.array([
        [1, 1, 1],
        [2, 1, 1],
        [2, 2, 1],
        [1, 2, 1],
        [1, 1, 2],
        [2, 1, 2],
        [2, 2, 2],
        [1, 2, 2]
    ])

    angle_x = 30
    angle_y = 45
    angle_z = 60
    scale_x = 2
    scale_y = 1
    scale_z = 0.5

    result_matrix = rotate_and_scale_3d(original_matrix, angle_x, angle_y, angle_z, scale_x, scale_y, scale_z)

    print("原始矩阵：")
    print(original_matrix)

    print("旋转和缩放后的矩阵：")
    print(result_matrix)