Name:Union Search

Code:
class UnionFind:
    def __init__(self, size):

        self.parent = list(range(size))
        self.rank = [0] * size

    def find(self, p):

        if self.parent[p] != p:
            self.parent[p] = self.find(self.parent[p])
        return self.parent[p]

    def union(self, p, q):

        rootP = self.find(p)
        rootQ = self.find(q)

        if rootP != rootQ:
            if self.rank[rootP] < self.rank[rootQ]:
                self.parent[rootP] = rootQ
            elif self.rank[rootP] > self.rank[rootQ]:
                self.parent[rootQ] = rootP
            else:
                self.parent[rootQ] = rootP
                self.rank[rootP] += 1

    def connected(self, p, q):

        return self.find(p) == self.find(q)

if __name__ == "__main__":
    uf = UnionFind(10)

    uf.union(0, 1)
    uf.union(1, 2)
    uf.union(3, 4)
    uf.union(2, 4)

    print("Are 0 and 2 connected?", uf.connected(0, 2))
    print("Are 1 and 4 connected?", uf.connected(1, 4))
    print("Are 0 and 5 connected?", uf.connected(0, 5))

    uf.union(5, 6)
    uf.union(6, 7)
    print("Are 5 and 7 connected?", uf.connected(5, 7))