Name:inorder traverse of RadixTree

Code:
class RadixTreeNode:
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False

class RadixTree:
    def __init__(self):
        self.root = RadixTreeNode()

    def insert(self, word):

        current_node = self.root
        while word:
            for key in current_node.children:
                prefix_length = self._common_prefix_length(key, word)
                if prefix_length > 0:
                    if prefix_length < len(key):
                        old_key = key
                        new_node = RadixTreeNode()
                        new_node.children[old_key[prefix_length:]] = current_node.children.pop(old_key)
                        current_node.children[key[:prefix_length]] = new_node

                    current_node = current_node.children[key[:prefix_length]]
                    word = word[prefix_length:]
                    break
            else:
                current_node.children[word] = RadixTreeNode()
                current_node.children[word].is_end_of_word = True
                return

        current_node.is_end_of_word = True

    def _common_prefix_length(self, str1, str2):

        i = 0
        while i < len(str1) and i < len(str2) and str1[i] == str2[i]:
            i += 1
        return i

    def display(self, node=None, prefix=""):

        if node is None:
            node = self.root

        for key, child in node.children.items():
            print(f"{prefix + key}{' (end)' if child.is_end_of_word else ''}")
            self.display(child, prefix + key)

if __name__ == "__main__":
    tree = RadixTree()

    tree.insert("cat")
    tree.insert("can")
    tree.insert("bat")
    tree.insert("banana")

    print("Radix Tree after insertion:")
    tree.display()