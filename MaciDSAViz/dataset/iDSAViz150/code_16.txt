Name:delete of BTree

Code:
class BTreeNode:

    def __init__(self, t, leaf=False):
        self.t = t
        self.leaf = leaf
        self.keys = []
        self.children = []

class BTree:

    def __init__(self, t):
        self.t = t
        self.root = BTreeNode(t, leaf=True)

    def insert(self, key):

        root = self.root
        if len(root.keys) == (2 * self.t) - 1:
            new_node = BTreeNode(self.t, leaf=False)
            new_node.children.append(self.root)
            self.split(new_node, 0)
            self.root = new_node
        self._insert_non_full(self.root, key)

    def _insert_non_full(self, node, key):

        if node.leaf:
            i = len(node.keys) - 1
            while i >= 0 and key < node.keys[i]:
                i -= 1
            node.keys.insert(i + 1, key)
        else:
            i = len(node.keys) - 1
            while i >= 0 and key < node.keys[i]:
                i -= 1
            i += 1
            if len(node.children[i].keys) == (2 * self.t) - 1:
                self.split(node, i)
                if key > node.keys[i]:
                    i += 1
            self._insert_non_full(node.children[i], key)

    def split(self, parent, index):

        node = parent.children[index]
        new_node = BTreeNode(self.t, leaf=node.leaf)

        parent.keys.insert(index, node.keys[self.t - 1])
        parent.children.insert(index + 1, new_node)

        new_node.keys = node.keys[self.t:]
        node.keys = node.keys[:self.t - 1]

        if not node.leaf:
            new_node.children = node.children[self.t:]
            node.children = node.children[:self.t]

    def delete(self, key):
        self._delete(self.root, key)
        if not self.root.keys and not self.root.leaf:
            self.root = self.root.children[0]

    def _delete(self, node, key):
        t = self.t
        i = 0
        while i < len(node.keys) and key > node.keys[i]:
            i += 1

        if i < len(node.keys) and key == node.keys[i]:
            if node.leaf:
                node.keys.pop(i)
            else:
                if len(node.children[i].keys) >= t:
                    pred = self._get_predecessor(node, i)
                    node.keys[i] = pred
                    self._delete(node.children[i], pred)
                elif len(node.children[i + 1].keys) >= t:
                    succ = self._get_successor(node, i)
                    node.keys[i] = succ
                    self._delete(node.children[i + 1], succ)
                else:
                    self._merge(node, i)
                    self._delete(node.children[i], key)
        else:
            if node.leaf:
                return
            child = node.children[i]
            if len(child.keys) < t:
                self._fill(node, i)
                if i > len(node.keys):
                    self._delete(node.children[i - 1], key)
                else:
                    self._delete(node.children[i], key)
            else:
                self._delete(child, key)

    def _get_predecessor(self, node, i):
        cur = node.children[i]
        while not cur.leaf:
            cur = cur.children[-1]
        return cur.keys[-1]

    def _get_successor(self, node, i):
        cur = node.children[i + 1]
        while not cur.leaf:
            cur = cur.children[0]
        return cur.keys[0]

    def _merge(self, node, i):
        child = node.children[i]
        sibling = node.children[i + 1]

        child.keys.append(node.keys.pop(i))
        child.keys.extend(sibling.keys)
        if not child.leaf:
            child.children.extend(sibling.children)
        node.children.pop(i + 1)

    def _fill(self, node, i):
        if i > 0 and len(node.children[i - 1].keys) >= self.t:
            self._borrow_from_prev(node, i)
        elif i < len(node.children) - 1 and len(node.children[i + 1].keys) >= self.t:
            self._borrow_from_next(node, i)
        else:
            if i < len(node.children) - 1:
                self._merge(node, i)
            else:
                self._merge(node, i - 1)

    def _borrow_from_prev(self, node, i):
        child = node.children[i]
        sibling = node.children[i - 1]

        child.keys.insert(0, node.keys[i - 1])
        if not child.leaf:
            child.children.insert(0, sibling.children.pop())
        node.keys[i - 1] = sibling.keys.pop()

    def _borrow_from_next(self, node, i):
        child = node.children[i]
        sibling = node.children[i + 1]

        child.keys.append(node.keys[i])
        if not child.leaf:
            child.children.append(sibling.children.pop(0))
        node.keys[i] = sibling.keys.pop(0)

if __name__ == "__main__":
    btree = BTree(t=3)

    for key in [10, 20, 5, 6, 12, 30, 7, 17]:
        btree.insert(key)

    for key in [6, 13, 7, 4, 2, 16]:
        btree.delete(key)