Name:LeftistHeap

Code:
class Node:

    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.npl = 0


class LeftistHeap:

    def __init__(self):
        self.root = None

    def merge(self, h1, h2):

        if not h1:
            return h2
        if not h2:
            return h1

        if h1.key > h2.key:
            h1, h2 = h2, h1

        h1.right = self.merge(h1.right, h2)

        if not h1.left or (h1.right and h1.left.npl < h1.right.npl):
            h1.left, h1.right = h1.right, h1.left

        h1.npl = 1 + (h1.right.npl if h1.right else 0)

        return h1

    def insert(self, key):

        new_node = Node(key)
        self.root = self.merge(self.root, new_node)

    def delete_min(self):

        if not self.root:
            raise IndexError("delete_min from an empty heap")
        min_value = self.root.key
        self.root = self.merge(self.root.left, self.root.right)
        return min_value

    def is_empty(self):

        return self.root is None

    def inorder_traversal(self, node=None, result=None):

        if result is None:
            result = []
        if node is None:
            node = self.root

        if node:
            self.inorder_traversal(node.left, result)
            result.append(node.key)
            self.inorder_traversal(node.right, result)

        return result


if __name__ == "__main__":
    heap = LeftistHeap()

    for key in [10, 20, 5, 30, 15, 25]:
        heap.insert(key)
        print("中序遍历:", heap.inorder_traversal())

    while not heap.is_empty():
        print("删除最小值:", heap.delete_min())
        print("中序遍历:", heap.inorder_traversal())