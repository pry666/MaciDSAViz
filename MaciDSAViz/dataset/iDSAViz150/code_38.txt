Name:Dijkstra and Prim

Code:
import heapq

def dijkstra(graph, start):

    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    priority_queue = [(0, start)]

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        if current_distance > distances[current_node]:
            continue

        for neighbor, weight in graph[current_node]:
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances

def prim(graph):

    mst = []
    visited = set()
    total_cost = 0
    start_node = next(iter(graph))
    priority_queue = [(0, start_node, None)]

    while priority_queue:
        weight, node, parent = heapq.heappop(priority_queue)

        if node in visited:
            continue

        visited.add(node)
        if parent is not None:
            mst.append((parent, node, weight))
            total_cost += weight

        for neighbor, edge_weight in graph[node]:
            if neighbor not in visited:
                heapq.heappush(priority_queue, (edge_weight, neighbor, node))

    return mst, total_cost

if __name__ == "__main__":
    graph = {
        'A': [('B', 1), ('C', 4)],
        'B': [('A', 1), ('C', 2), ('D', 6)],
        'C': [('A', 4), ('B', 2), ('D', 3)],
        'D': [('B', 6), ('C', 3)]
    }

    start_node = 'A'
    print("Dijkstra's Algorithm:")
    shortest_distances = dijkstra(graph, start_node)
    for node, distance in shortest_distances.items():
        print(f"Shortest distance from {start_node} to {node}: {distance}")

    print("\nPrim's Algorithm:")
    mst, total_cost = prim(graph)
    print("Edges in the MST:", mst)
    print("Total cost of the MST:", total_cost)