Name:preorder traversal of a binary tree

Code:
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

root = TreeNode(1,
    left=TreeNode(2,
        left=TreeNode(4,
            left=TreeNode(8),
            right=TreeNode(9)
        ),
        right=TreeNode(5,
            left=TreeNode(10),
            right=TreeNode(11)
        )
    ),
    right=TreeNode(3,
        left=TreeNode(6,
            left=TreeNode(12),
            right=TreeNode(13)
        ),
        right=TreeNode(7,
            left=TreeNode(14),
            right=TreeNode(15)
        )
    )
)

def preorder_traversal_iterative(root):
    if root is None:
        return []

    stack, result = [root], []

    while stack:
        node = stack.pop()
        result.append(node.val)
        if node.right:
            stack.append(node.right)
        if node.left:
            stack.append(node.left)

    return result

print("\n迭代实现前序遍历:")
print(preorder_traversal_iterative(root))