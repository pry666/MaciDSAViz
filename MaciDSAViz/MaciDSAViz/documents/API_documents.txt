1.CreateCircle: objectID, label, initial_x, initial_y
objectID: Non-negative integer that represents the ID of this object. Must be different from any ID currently active. Should be as small as posslbe for better performance.
label: the label that appears in the middle of the circle. It may contain end of line (\n) characters, which allows you to place a multi-line label in the circle. Labels are centered in circles.
initial_x: (optional, defaults to 0) the initial x position of the circle
initial_y: (optional, defaults to 0) the initial u position of the circle

2.CreateRectange: objectID, label, width, height, initial_x, initial_y, xJustify, yJustufy, backgroundColor, foregroundColor
objectID: Non-negative integer that represents the ID of this object. Must be different from any ID currently active. Should be as small as posslbe for better performance.
label: the label that appears in the middle of the rectangle. It may contain end of line (\n) characters, which allows you to place a multi-line label in the rectangle. Labels are centered in rectangles.
width: The width of the rectangle, in pixels
height: The height of the rectangle, in pixels
initial_x: (optional, defaults to 0) the initial x position of the rectangle
initial_y: (optional, defaults to 0) the initial u position of the rectangle
xJustify: (optional, defaults to "center"). One of "center", "left", "right" -- If the rectangle is at location (x, y), does x stand for the left, center, or right of the rectangle
yJustify: (optional, defaults to "center"). One of "center", "top", "bottom" -- If the rectangle is at location (x, y), does y stand for the top, center, or bottom of the rectangle
foregroundColor: The initial color of the foregorund of the rectangle, using string representations of HTML colors ("#FF0000" for red, "#00FF00" for green, and so on). Defaults to black
backgroundColor: The initial color of the background of the rectangle, using HTML colors (#FF0000 for red, #00FF00 for green, and so on). Defaults to white.

3.CreateHighlightCircle: objectID, color, initial_x, initial_y, radius
A highlight circle is much like a standard circle, except that it has no label, and no background color, so that it does not obscure other objects like a circle does.
objectID: Non-negative integer that represents the ID of this object. Must be different from any ID currently active. Should be as small as posslbe for better performance.
color: The initial color of the circle, using HTML colors ("#FF0000" for red, "#00FF00" for green, and so on)
initial_x: (optional, defaults to 0) the initial x position of the circle
initial_y: (optional, defaults to 0) the initial u position of the circle
radius: (optional, defaults to 20) The radius of the circle.

4.CreateLabel: objectID, label, initial_x, initial_x, centered
objectID: Non-negative integer that represents the ID of this object. Must be different from any ID currently active. Should be as small as posslbe for better performance.
label: the text of the label. It may contain end of line (\n) characters, which allows you to place a multi-line labels.
initial_x: (optional, defaults to 0) the initial x position of the label
initial_y: (optional, defaults to 0) the initial y position of the label
centered: (optional, defaults to true) true or 1 if the label should be centered, false or 0 if it should not.

5.CreateLinkedList: objectID, label, width, height, initial_x, initial_y, linkPercent, verticalOrientation, linkPosEnd, numLabels
objectID: Non-negative integer that represents the ID of this object. Must be different from any ID currently active. Should be as small as posslbe for better performance.
label: The label inside this linked list element (or the first label, if there are more than one)
width: The width of the linked list element, in pixels
height: The height of the linked list element, in pixels
initial_x: (optional, defaults to 0) the initial x position of the linked list element
initial_y: (optional, defaults to 0) the initial y position of the linked list element
linkPercent: (optional, defaults to 0.25) The percentage of the linked list element that the outgoing pointer takes up.
verticalOrientation: (optional, defaults to true). Should the linked list element be vertial (true) or horizontal (false)
linkPosEnd: (optional, defaults to false). Should the poiner appear at the bottom or left of the linked list element (true), or the top or right of the linked list element (false)
numLabels: (optional, defaults to 1). The number of labels that the linked lists element can hold. See the adjacency list implementat of a graph visualization for an example of a linked list element with more than 1 label.

6.CreateBTreeNode: objectID, widthPerLabel, height, numLabels, inital_x, initial_y, backgroundColor, foregroundColor
Somewhat special-purpose animated object created for B-Trees. Single rectangle containing any number of labels, with no dividing lines between the labels. Edges can be attached between each label, and to the left of the leftmost label, and to the right of the rightmost label. See the BTree and B+ Tree visualizations for examples.
objectID: Non-negative integer that represents the ID of this object. Must be different from any ID currently active. Should be as small as posslbe for better performance.
widthPerLabel: The width of the B-Tree node is the number of labels * the width per label. Value is in pixels.
height: Height of the B-Tree node in pixels
numLabels: The number of labels in the BTree node.
initial_x: The initial x position of the B-Tree node
initial_y: The initial y position of the B-Tree node
backgroundColor: The initial color of the background of the rectangle, using HTML colors (#FF0000 for red, #00FF00 for green, and so on)
backgroundColor: The initial color of the forground of the rectangle, using HTML colors (#FF0000 for red, #00FF00 for green, and so on)

7.Delete: objectID
objectID: The ID of the object to delete. All edges incident on this object will be removed. (If the delete is undone, then all such edges will be restored). Once an Animated Element has been deleted, its ID is free to be used again. Note that overly complicated ID management (which is really memory management, since IDs are just indicies into a "memory array" of active animated objects) is not necessarily recommended, since it can lead to some subtle bugs.
Note that creation of an object using an objectID that already is in use will throw an exception. Deleting an ID that is not currently in use will also throw an exception.

8.Move: objectID, toX, toY
Move the object smoothly over the next step from the current position to the new position
objectID: The ID of the object to move. The object must exists, or an exception will be thrown
toX: The new X location to move to
toY: The new Y location to move to

9.SetPosition: objectID, toX, toY
Move the object immediately to the new position at the beginning of the next step
objectID: The ID of the object to move. The object must exists, or an exception will be thrown
toX: The new X location to move to
toY: The new Y location to move to

10.SetForegroundColor: objectID, color
Sets the foreground color (outline color and label color) of an object. Note that if an object has several labels this will set the color of all labels.
objectID: The ID of the object to modify. The object must exists, or an exception will be thrown
color: New foreground color (string representing HTML color, like "#ff0000")
SetBackgroundColor: objectID, color
Sets the background color of current object. Note that if an object has several labels this will set the color of an object.
objectID: The ID of the object to modify. The object must exist, or an exception will be thrown
color: New background color

11.SetHighlight: objectID, highlightVal
Mark an object as either highlighted or unhighlighted, based on the value of highlightVal. Objects that are highlighted will pulse red. Any object can be highlighted (thought labels are slightly harder to read when highlighted) Note that if an object is left highlighted after an animation is ended, it will not pulse until the animation starts again. Edges can be highlighted using the highlight edge command.
objectID: The ID of the object to modify. The object must exists, or an exception will be thrown
highlightVal: 1 or true, turn on highlighting. 0 or false, turn off highlighting.

12.SetText: objectID, newText, textIndex
Sets the value of the label associated with the object (the printing withing a circle, for instance).
objectID: The ID of the object to modify. The object must exists, or an exception will be thrown
newText: The new text of the label
textIndex: (optional, defaults to 0) Index of the text label to change. Only used in objects that have more than one text label (B-Tree nodes, Linked List nodes). If the object does not support multiple labels, this is ignored.

13.SetAlpha: objectID
Sets the alpha (transparency) of the object. 0 is completely transparent, 1 is completely opaque. Works for all objects.
objectID: The ID of the object to modify. The object must exists, or an exception will be thrown.

14.SetHeight: objectID, newHeight
Sets the height (in pixels) of the object.
objectID: The ID of the object to modify. The object must exists, or an exception will be thrown
newHeight: The new height of the object.

15.SetWidth: objectID, newWIdth
Sets the width (in pixels) of the object.
objectID: The ID of the object to modify. The object must exists, or an exception will be thrown
newWidth: The new width of the object.

16.SetTextColor: objectID, newColor, textIndex
Sets the color of the label associated with the object
objectID: The ID of the object to modify. The object must exists, or an exception will be thrown
newColor: The new color to set. As with all colors, should be a html color string
textIndex: (optional, defaults to 0) If the object contain multiple labels (such as a linked-list node, or a B-Tree node) determine which label to change the color of. If the object only has one label, this parameter is ignored.

17.SetNull: objectID, nullValue
Currently only used for linked-list elements. Should the area set aside for the pointer in the linked list object be drawn as a null pointer (slash through the field)? This should probably be automated (draw the slash if and only if the node is not connected to anything), but for now this must be done manually.
objectID: The ID of the object to modify. The object must exists, or an exception will be thrown
nullValue: 0 or false for do not draw the slash, 1 or true for draw the slash.

18.SetNumElements: objectID, numElements
Currently only used for B-Tree nodes. Changes the number of labels stored in this B-tree node. Should probably be extended to at least Linked-list nodes.
objectID: The ID of the object to modify. The object must exists, or an exception will be thrown
numElements: integer, the number of elements this B-Tree node should have

19.AlignRight: object1ID, object2ID
Align object1 so that it is immediately to the right of object2. Very handy for lining up labels (where you don't necessarily know the width of the label), but can be used with any two objects.
object1ID: The ID of the object to move. The object must exists, or an exception will be thrown
object2ID: The ID of the object used to align object1. The object must exists, or an exception will be thrown

20.AlignLeft: object1ID, object2ID
Align object1 so that it is immediately to the left of object2. Very handy for lining up labels (where you don't necessarily know the width of the label), but can be used with any two objects.
object1ID: The ID of the object to move. The object must exists, or an exception will be thrown
object2ID: The ID of the object used to align object1. The object must exists, or an exception will be thrown

21.AlignTop: object1ID, object2ID
Align object1 so that it is immediately on top of of object2. Very handy for lining up labels (where you don't necessarily know the width of the label), but can be used with any two objects.
object1ID: The ID of the object to move. The object must exists, or an exception will be thrown
object2ID: The ID of the object used to align object1. The object must exists, or an exception will be thrown

22.AlignBottom: object1ID, object2ID
Align object1 so that it is immediately below object2. Very handy for lining up labels (where you don't necessarily know the width of the label), but can be used with any two objects.
object1ID: The ID of the object to move. The object must exists, or an exception will be thrown
object2ID: The ID of the object used to align object1. The object must exists, or an exception will be thrown

23.Edge Manipulation Commands
Edges are manipulated by giving the two objects associated with the edge. While edges can be graphically directed or undirected, all edges under the hood have a direction, which is the direction that they were given when the edge was created. There can only be one edge from any object to any other object (though there can be an edge from object1 to object2, and a different edge from object2 to object1.) Edges are always referred to by two IDs - the objectID of the "from" object, followed by the objectID of the "to" object. Any object can be connected to any other object.

24.Connect: fromID, toID, linkColor, curve, directed, label, anchorPosition
fromID: The ID of the object at the tail of the new edge
toID: The ID of the object at the head of the new edge
linkColor: (optional, defaults to "#000000") The color of the edge
linkColor: (optional, defaults to false) true for a diected edge, false for an undirected edge
curve: (optional, defaults to 0.0) The "curviness" of the edge. 0.0 is perfectly straight, positive values arc to the right, negative values arc to the left.
directed (optional, defaults to true). True if the edge is directed, false if the edge is undirected
label (optional, defaults to ""). The label that appears along the edge (useful for things like edge costs in graphs)
anchorPosition (optional, defaults to 0) If the edge could have more than one attachment postion at the "from" node, (currently only used for B-Tree nodes, but could well be expanded to things like doubly-linked lists) the index of the attachment position to use. Ignored for animated objects that do not have multiple attachment positions

25.Disconnect: fromID, toID
Removes an edge between two elements. If there is no edge, then this operation is a no-op.
fromID: The ID of the "From" direction of the edge
toID: The ID of the "To" direction of the edge
Note that even "undirected" edges have a "from" and a "to" -- determined by how the edge was created using the Connect command.

26.SetAlpha: objectID
Sets the alpha (transparency) of the object. 0 is completely transparent, 1 is completely opaque
objectID: The ID of the object to modify. The object must exists, or an exception will be thrown

27.SetEdgeHighlight: fromID, toID, highlightVal
Mark an edge as either highlighted or unhighlighted, based on the value of highlightVal. Edges that are highlighted will pulse red.
fromID: The ID of the "From" direction of the edge
toID: The ID of the "To" direction of the edge
higlightVal: 0 or false, turn of higlighting. 1 or true, turn on highlighting.


28.Step: <No parameters>
The step command allows you to keep everything from happening at once. The way that most animations will work is that you will create a group of objects, then do a step, then do some movements, then do a step, then do more movements, then do a step, and so on. All commands that appear between adjacent steps will happen simultaneously. Each step represents where the animation will pause when it is in single-step mode.

29.SetLayer: objectID, newLayer
Sets the layer of the object. All objects default to layer 0, and the "shown" layer always defaults to 0. You can change the layers of different objects, and then change the list of which layers are currently shown, to show or hide objects dynamically. (This is often useful for allowing the user to show or hide information, or to alternate between different versions of a representation). An object will only appear if its layer is one of the layers listed to be shown. An edge will only appear of each of the objects that it connect are to be shown. While commands cannot be executed while an animation is running, the global set of visible layers can be changed while an animation is running
objectID: The ID of the object to modify. The object must exists, or an exception will be thrown
layer: The new layer for this object. Each object must live in one and only one layer (though any combination of layers can be shown at any given time)